/*
 * ToolJet
 * The tooljet API endpoints
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 5.2.1-SNAPSHOT
 */

import http from 'k6/http';
import { group, check, sleep } from 'k6';

export let options = {
  stages: [
    { duration: '1m', target: 1000 }, // simulate ramp-up of traffic from 1 to 100 users over 5 minutes.
    { duration: '5m', target: 1000 }, // stay at 1000 users for 10 minutes
    { duration: '1m', target: 0 }, // ramp-down to 0 users
  ],
  thresholds: {
    http_req_duration: ['p(99)<1500'], // 99% of requests must complete below 1.5s
    http_req_failed: ['rate<0.01'], // during the whole test execution, the error rate must be lower than 1%.
  },
};

// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.
const BASE_URL = 'http://localhost:3000/api';
const EMAIL = 'dev@tooljet.io';
const PASSWORD = 'password';

let APP_ID;
let DATA_SOURCE_ID;
let DATA_QUERY_ID;

export function setup() {
  const response = authenticate();

  return response.json().auth_token;
}

function randomString(length) {
  const charset = 'abcdefghijklmnopqrstuvwxyz';
  let res = '';
  while (length--) res += charset[(Math.random() * charset.length) | 0];
  return res;
}

function authenticate() {
  const url = BASE_URL + `/authenticate`;
  const headers = { headers: { 'Content-Type': 'application/json' } };
  const payload = JSON.stringify({
    email: 'dev@tooljet.io',
    password: 'password',
  });

  return http.post(url, payload, headers);
}

function deleteAppAfterTest(authToken, appId) {
  const headers = {
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${authToken}`,
    },
  };
  const url = BASE_URL + `/apps/${appId}`;

  let response = http.del(url, null, headers);

  check(response, {
    'app deleted successfully': (r) => r.status === 200,
  });
}

export default function (authToken) {
  group('unit tests', () => {
    group('POST /authenticate', () => {
      const response = authenticate();

      check(response, {
        'authenticated successfully': (r) => r.status === 201,
        'authentication returns auth token': (r) => !!r.json().auth_token,
      });

      sleep(SLEEP_DURATION);
    });

    group('/apps', () => {
      let SLUG = randomString(10);

      group('POST /apps', () => {
        const headers = {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${authToken}`,
          },
        };
        const payload = JSON.stringify({
          name: 'dev@tooljet.io',
        });
        const url = BASE_URL + '/apps';
        let response = http.post(url, payload, headers);

        check(response, {
          'app create returns 201': (r) => r.status === 201,
          'app created with default values': (r) =>
            r.json().name == 'Untitled app',
        });

        APP_ID = response.json().id;

        sleep(SLEEP_DURATION);
      });

      group('GET /apps/:id', () => {
        const headers = {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${authToken}`,
          },
        };
        const url = BASE_URL + `/apps/${APP_ID}`;
        let response = http.get(url, headers);

        check(response, {
          'app show returns 200': (r) => r.status === 200,
        });

        sleep(SLEEP_DURATION);
      });

      group('PATCH /apps/:id', () => {
        const headers = {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${authToken}`,
          },
        };

        const payload = JSON.stringify({
          app: {
            name: 'Loadtest app',
            slug: SLUG,
          },
        });

        const url = BASE_URL + `/apps/${APP_ID}`;
        let response = http.put(url, payload, headers);

        check(response, {
          'app update returns 200': (r) => r.status === 200,
        });

        sleep(SLEEP_DURATION);
      });

      group('GET /apps/slugs/:slug', () => {
        const headers = {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${authToken}`,
          },
        };
        const url = BASE_URL + `/apps/slugs/${SLUG}`;
        let response = http.get(url, headers);

        check(response, {
          'app show by slug returns 200': (r) => r.status === 200,
        });

        sleep(SLEEP_DURATION);
      });
    });

    group('/data_sources', () => {
      group('POST /data_sources', () => {
        const headers = {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${authToken}`,
          },
        };
        const payload = JSON.stringify({
          app_id: APP_ID,
          name: 'MySQL',
          kind: 'mysql',
          options: [
            {
              key: 'host',
              value: 'localhost',
            },
            {
              key: 'port',
              value: 3306,
            },
            {
              key: 'database',
              value: 'load_test',
            },
            {
              key: 'username',
              value: 'root',
            },
            {
              key: 'password',
              value: 'somepassword',
              encrypted: true,
            },
          ],
        });
        const url = BASE_URL + '/data_sources';
        let response = http.post(url, payload, headers);

        check(response, {
          'data source create returns 201': (r) => r.status === 201,
        });

        DATA_SOURCE_ID = response.json().id;

        sleep(SLEEP_DURATION);
      });
    });

    group('/data_queries', () => {
      group('POST /data_queries', () => {
        const headers = {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${authToken}`,
          },
        };
        const payload = JSON.stringify({
          app_id: APP_ID,
          name: 'mysqlloadtest',
          kind: 'mysql',
          options: {
            query: 'select * from data limit 50',
            runOnPageLoad: true,
          },
          data_source_id: DATA_SOURCE_ID,
        });
        const url = BASE_URL + '/data_queries';
        let response = http.post(url, payload, headers);

        check(response, {
          'data query create returns 201': (r) => r.status === 201,
        });

        DATA_QUERY_ID = response.json().id;

        sleep(SLEEP_DURATION);
      });

      group('POST /data_queries/:id/run', () => {
        const headers = {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${authToken}`,
          },
        };

        const payload = JSON.stringify({
          options: {},
        });

        const url = BASE_URL + `/data_queries/${DATA_QUERY_ID}/run`;
        let response = http.post(url, payload, headers);

        // console.log(response.body);

        check(response, {
          'data query run returns 201': (r) => r.status === 201,
          'data query run returns query result': (r) => r.json().data !== [],
        });

        sleep(SLEEP_DURATION);
      });
    });

    // teardown for specific app creaated
    deleteAppAfterTest(authToken, APP_ID);
  });
}
